plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'action.in.blog'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    jaxb
    compileOnly {
        extendsFrom annotationProcessor
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'src/main/jaxb' // 소스 코드 경로로 src/main/jaxb 추가
        }
    }
}

extensions.findByName("buildScan")?.with {
    setProperty("termsOfServiceUrl", "https://gradle.com/terms-of-service")
    setProperty("termsOfServiceAgree", "yes")
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-web-services' // Spring Web Services
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0' // JDK17 에러 보완

    jaxb "org.glassfish.jaxb:jaxb-xjc" // OXM
}

tasks.named('test') {
    useJUnitPlatform()
}

// 서비스 제공자가 노출한 WSDL 파일을 기준으로 클래스를 생성하는 태스크
tasks.register('genJaxb') {
    // 생성한 소스 코드 경로
    ext.sourcesDir = "src/main/jaxb"
    // 스키마 정보를 받을 수 있는 주소
    ext.schema = "http://localhost:8080/ws/schemas.wsdl"

    outputs.dir sourcesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask", classpath: configurations.jaxb.asPath

            mkdir(dir: sourcesDir)

            xjc(destdir: sourcesDir, schema: schema, package: "action.in.blog.wsdl") {
                arg(value: "-wsdl")
                produces(dir: sourcesDir, includes: "**/*.java")
            }
        }
    }
}