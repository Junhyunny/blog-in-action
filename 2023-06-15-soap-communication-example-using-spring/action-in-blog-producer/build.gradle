plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'action.in.blog'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    jaxb
    compileOnly {
        extendsFrom annotationProcessor
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'src/main/jaxb'
        }
    }
}

extensions.findByName("buildScan")?.with {
    setProperty("termsOfServiceUrl", "https://gradle.com/terms-of-service")
    setProperty("termsOfServiceAgree", "yes")
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'com.github.javafaker:javafaker:1.0.2'
    implementation 'wsdl4j:wsdl4j'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
    implementation 'org.apache.ws.xmlschema:xmlschema-core:2.2.1'

    jaxb "org.glassfish.jaxb:jaxb-xjc"
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.register('genJaxb') {
    ext.sourcesDir = "src/main/jaxb"
    ext.schema = "src/main/resources/xsd"

    outputs.dir sourcesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask", classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
            xjc(destdir: sourcesDir) {
                arg(value: "-wsdl")
                schema(dir: schema, includes: "**/*.xsd")
                produces(dir: sourcesDir, includes: "**/*.java")
            }
        }
    }
}