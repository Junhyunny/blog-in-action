import * as sut from "./ip-converter";

describe("IP converter Test", () => {
  test.each([
    "0.0.0.256/24",
    "0.0.0.255/a",
    "0.0.0.255/24/24",
    "256.0.0.255/24",
    "0.256.0.0/24",
    "a.255.0.0/24",
    "0.b.0.0/24",
    "0.0.c.0/24",
    "0.0.0.d/24",
    "0.0.256.0/24",
    "127.167.108.0/-1",
    "127.167.108.0/33",
    "0.0.0.256",
    "0.0.0.256/",
    "0.0.0.255/",
    "/24",
    "0.0.255/24",
    "0.255/24",
    "256/24",
  ])("유효하지 않은 CIDR를 입력하면 NULL을 반환한다.", (value) => {
    const result = sut.convertCIDR(value);

    expect(result.fromIp).toBeNull();
    expect(result.toIp).toBeNull();
  });

  test.each([
    ["7.88.135.144/28", ["7.88.135.144", "7.88.135.159"]],
    ["192.168.1.0/22", ["192.168.0.0", "192.168.3.255"]],
    ["125.214.10.5/22", ["125.214.8.0", "125.214.11.255"]],
    ["125.214.10.5/32", ["125.214.10.5", "125.214.10.5"]],
    ["125.214.10.5/0", ["0.0.0.0", "255.255.255.255"]],
    ["125.214.10.25/24", ["125.214.10.0", "125.214.10.255"]],
    ["125.214.10.25/16", ["125.214.0.0", "125.214.255.255"]],
    ["125.214.10.25/1", ["0.0.0.0", "127.255.255.255"]],
  ])("유효한 값을 입력하면 변환된 값이 반환된다.", (value, expectedResult) => {
    const result = sut.convertCIDR(value);

    expect(result.fromIp).toEqual(expectedResult[0]);
    expect(result.toIp).toEqual(expectedResult[1]);
  });
});
